[package]
name = "iroha_crypto"

edition.workspace = true
version.workspace = true
authors.workspace = true

license.workspace = true

[lints]
workspace = true

[features]
default = ["std"]
# Enable static linkage of the rust standard library.
# Please refer to https://docs.rust-embedded.org/book/intro/no-std.html
std = [
    "dep:blake2",
    "dep:digest",
    "dep:sha2",
    "dep:hkdf",
    "dep:amcl",
    "dep:amcl_wrapper",
    "dep:signature",
    "dep:ed25519-dalek",
    "dep:curve25519-dalek",
    "dep:x25519-dalek",
    "dep:rand",
    "dep:rand_chacha",
    "dep:zeroize",
    "dep:arrayref",
    "dep:aead",
    "dep:chacha20poly1305",
    "dep:elliptic-curve",
    "dep:k256",
    "dep:thiserror",
    "displaydoc/std",
]
# Force static linking
vendored = ["dep:openssl-sys"]
# Replace structures and methods with FFI equivalents to facilitate dynamic linkage (mainly used in smartcontracts)
#ffi_import = ["iroha_ffi", "iroha_primitives/ffi_import"]

# Expose FFI API for dynamic linking (Internal use only)
ffi_export = ["std", "iroha_ffi", "iroha_primitives/ffi_export"]

[dependencies]
iroha_primitives = { workspace = true }
iroha_macro = { workspace = true }
iroha_ffi = { workspace = true, optional = true }
iroha_schema = { workspace = true }

derive_more = { workspace = true, features = ["deref", "deref_mut", "display"] }
parity-scale-codec = { workspace = true, features = ["derive", "full"] }
serde = { workspace = true, features = ["derive"] }
serde_with = { workspace = true, features = ["macros"] }
hex = { workspace = true, features = ["alloc", "serde"] }
# TODO: iroha_crypto no longer depends on openssl (did it ever?)
# currently it's being used by iroha_client through attohttpc and iroha_cli through warp's tokeio-tunstenite
openssl-sys = { version = "0.9.93", features = ["vendored"], optional = true }
getset = { workspace = true }

thiserror = { version = "1.0.50", optional = true }
displaydoc = { version = "0.2.4", default-features = false }

digest = { version = "0.10.7", optional = true }
blake2 = { version = "0.10.6", optional = true }
sha2 = { version = "0.10.8", optional = true }
hkdf = { version = "0.12.3", optional = true }
amcl = { version = "0.2.0", optional = true, default-features = false, features = ["secp256k1"] }
amcl_wrapper = { version = "0.4.0", optional = true }

signature = { version = "2.1.0", optional = true }
ed25519-dalek = { version = "2.0.0", optional = true, features = ["rand_core"] }
curve25519-dalek = { version = "4.1.1", optional = true }
x25519-dalek = { version = "2.0.0", optional = true, features = ["static_secrets"] }

rand = { workspace = true, optional = true }
rand_chacha = { version = "0.3.1", optional = true }


zeroize = { version = "1.6.0", optional = true }
arrayref = { version = "0.3.7", optional = true }

aead = { version = "0.5.2", optional = true }
chacha20poly1305 = { version = "0.10.1", optional = true }

elliptic-curve = { version = "0.13.6", optional = true }
k256 = { version = "0.13.1", optional = true, features = ["ecdsa", "sha256"]}

[dev-dependencies]
hex-literal = { workspace = true }
serde_json = { workspace = true }

# these crypto libraries are not used to implement actual crypto algorithms
# but to test some of the primitives against them
secp256k1 = { version = "0.28.0", features = ["rand", "serde"] }
libsodium-sys-stable = "1.20.3"
openssl = "0.10.59"
